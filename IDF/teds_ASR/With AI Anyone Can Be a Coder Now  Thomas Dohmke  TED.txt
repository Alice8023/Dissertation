 You know, I am one of these adults that actually still loves playing with Lego. I love them way back in the 80s in Berlin when I go up and I still love them. In these days, I build Lego with my kids on Saturday afternoons. And the reason that my love for Lego has remained evergreen is quite simply that Lego is a system for realizing creativity with almost no barrier to entry. Now, not only a Lego dad, I'm also the CEO of GitHub. And if you don't know GitHub, you can't think of it as the home of coding. It's where all the software developers, the chief nerds of our society, collaborate together. And it's part of our mission to make it as easy as possible for every developer to build small and big ideas with code. But in contrast to Lego, the process of building software feels daunting to most people. This all started to change when ChetGPT came along in late 2022. Now we live in the world where intelligent machines understand us as much as we understand them. All because of language. And this will forever change the way we create software. Up until now, in order to create software, you had to be a professional software developer. You had to understand, speak and interpret the highly complex, sometimes non-sensical language of a machine that we call code. More and code still looks like hieroglyphics to most people. Here's an example. This from the early 1940s is the world's first computer programming language called Plantalcool. It set the foundation for the modern code that we used today. And as you can see, it's a few numbers, some bubbles, and some big ass brackets. Not much humanity here, right? Flash forward about 20 years to the program language called Cobal. Cobal was invented during the Eisenhower years, but it remains an important language for many of our largest financial institutions. Wall Street, your savings account, your credit cards, all run on this today. We see some familiar words here, but structurally, I think this does make much sense to most of you. Flash forward another 30 years to 1991, and we saw the birth of Python. One of the most popular programming languages in this era of AI. In 80 years, we went from bubbles to brackets to blips of English. And yet, we got nowhere near as close as the intuitiveness of human language. But then came June 2020, and we got early access to OpenEI's large language model, then called GPT-3. It was COVID. We were all on lockdown. I remember we were on a video call together. We fact random programming exercises into this raw model. And like magic, it solved 93% of them during the first few takes. We had GitHub recognized with something remarkable in our hands, and we quickly turned around a novel developer tool called GitHub Co-Pilot. An AI assistant that predicts and completes code for software developers. Co-Pilot is now the most adopted AI developer tool on the planet. The age of programming has been reborn. But the possibilities of the breakthrough went further than just these business results. Because the large language models that Power, ChatGPT, and Co-Pilot are trained on a vast library of human information, they understand an interpret nearly every human language, every major human language. They seem to get us. We have struck a new fusion between the language of a human and a machine. With Co-Pilot, any person can now build software in any human language with a single written prompt. Goodby to the bubbles and the big-ass bracket. This is the most profound breakthrough to technology since the genesis of software development itself. Today, there are over 100 million developers on GitHub. That's about 1% of the world's population, you know, plus, minus. I think that number is about to explode, and I want to show you why here on my MacBook. We started it all with the original Co-Pilot, how we say the OG Co-Pilot, and it really just predicted and completed code in the editor. You can think of the editor as, you know, that Google docs for developers. When you have an open doc open, you know how this empty page, what do I actually want to do? I mentioned LEGO. Let's build a 3D LEGO brick on a web page. What developers do, they start typing in a JavaScript file, create a function to create a LEGO brick. You can see here this great text, we call this ghost text, this is coming from the large language model. So now I can just press the tab key and press enter, and I get another suggestion, you know, to create a LEGO tower, maybe do that later, or I can just do function, draw LEGO brick. And here again, you see ghost text from Co-Pilot, right away, available for me. And if I like what I'm seeing here, so I get into a bit more mode of writing and understanding, I can just accept this. Developers love that, right? Because instead of writing 10 lines of code themselves or copy and pasting them from the internet, they get them right in the editor, they can stay in the flow. Now what the OG Co-Pilot didn't offer me is a way to interact with this. I cannot ask questions, I cannot, you know, instruct it to do different things. Last year we launched a new feature, Co-Pilot Chat. And you can think about it as ChatGPT in your editor. So I can open this up here in the site bar, and now I can tell it to create a whole web page with a 3D LEGO brick for me. Now, you know, similar to ChatGPT, it streams the response, and it gives me not only some code, but it actually gives me an explanation. You know, it starts writing code. You can see the comments that explains what that code does. It uses an open source library called 3JS. And you can kind of see the idea of this empowering developers and people that want to learn development. And it ends, you know, with another explanation. Now we can go here, inspect that code, and it can actually push that button to copy it into my file. But I want to show you something else here. You might have already seen this little mic icon. So I can use that to speak to Co-Pilot, and I want to ask it in German what that code does that is on the left side in the editor. Can you clear what this is a query code made? And now we know Co-Pilot response again, but it spawns in German to me, right? So it says, if I lose the translate, yes, of course, this JavaScript code defines a function named StrawLeggerbrick. So get the idea here. A six-year-old in Berlin in Mumbai and Rio can now explore coding without their parents being around or even having a technical background. I mean, you know. Now what you also see is you still need to kind of figure out how you put that all together, right? There's a lot of technical stuff here. I have code. I have to iterate on my machine. I have to figure out how to deploy this to the clouds that I can share with my friends. But here's my Lego break now. This is what it looks like. If I've done all these steps as a developer, you can see, you know, it's a nicely rotating brick. I can actually use my mouse to turn it around. These are the anti-stuts, here the studs. There's nice lighting effects. It can even zoom into this and zoom out of this. Now I don't want to do all this developer stuff anymore. I just want to channel my creativity straight into reality. And so for the first time ever on stage, I'm going to show you a new product that we call Co-Pilot workspace that does exactly that. So here's my workspace. And you can already see there's not an editor anymore. I can just see a task and I can enter a task. So now I have my Lego break. I want to now expand the Lego break into a Lego house. Stack the bricks in the shape of a Lego house. And I can do that also in German in another language, but for now, let's stick with English. I can save my task. And now what happens is that Co-Pilot workspace analyzes what I already have and then describes what it proposes to me. Basically, reframes my ask into a plan or a specification. And so you can see here, it's all a natural language. It uses some file names, of course, but there is no code here. It's all describing it. In English, I can actually go into this and edit it and can make changes to this line or can go down here and add another item if I feel like the plan is not exactly what I want. I can go a step further and generate a plan. And now an agent runs through all my files already half and figures out how do I need to modify those files or do I need to add files to my repository. So it wants to add a create Lego house function and call the create Lego house afterwards. Looks good to me. So let's implement this. And now Co-Pilot uses my task, my specification, my plan to write code for me. You can see here, two files are cute. The public Lego bread.js file and boom. There's already my code written for me. I didn't have to touch code. I didn't have to even know what code is. Now I see here, there's, it imports some new line into my file and it has written lots of code here that does those changes. So if you want to see what that looks like, did we get a Lego house? So here's a button that lets me open a live preview. So I can do this. And now the rigs fall from the sky and I have a Lego house. And this is not a picture, right? Yes, thank you. This is all live. This is the power of code. This is the power of streaming my creativity into reality with natural language. Now one last thing, thank you Co-Pilot. You have always to be nice to the AI. Now what you just saw were three leaps in three years. Three leaps that are more progress to the accessibility of computer programming than we have made in the last 100. Remember how I said that 1% of the world's population is a developer? Now you can see how this will change. Co-Pilot workspace may still be a developer tool right now, but soon enough these kind of developer tools will become mainstream. Because going forward every person no matter what language they speak will also have the power to speak machine. Any human language is now the only skill that you need to start computer programming. This will lead to a globalized grounds full of software developers and it will reshape the geography of our global economy. And because of this, I think by 2030 maybe even sooner we will have more than 1 billion software developers on GitHub. Think about that. 10% of the world's population will not only control a computer, but will also be able to create software just as they were writing a bicycle. This will generate a new renaissance of human creativity with software. Now anyone here in this room could have a brilliant idea right now, a website, an application, a cool computer game, an amazing song, maybe even a cure for something. For example, last year over a couple of weeks I will an app that tracks all the flights I've ever taken in my life. Now I know what you're thinking. What a freaking nerd. Right? And yeah, it's true. I love building stuff like this. And with the help of AI, now I can do this in English or in German before I even finish a glass of wine. And soon enough this will be true for everyone here. The floodgates of Nerdetube have swung wide open. Now this doesn't mean that everyone will become a professional software developer or even that they should. The profession of a professional software developer is not going anywhere. There will always be demand for those that design and maintain the largest software systems in the world. We're adding millions of lines of code every single day to ever more complex systems. And we're barely keeping up with maintaining the existing ones. Like any infrastructure in this world, our devilish real experts to preserve and renew it. The point here is not a will or a should. It's that anyone can. All because the most powerful system that we have, any human language is now fused to the language of a machine. And very soon building software will be just a simple and joyful as stacking a Lego. Thank you, Shun. Gosh, I got to say a one billion developers makes GitHub sound more like YouTube and TikTok. Yes. That's today. It's just super exciting. Got to ask you one question. Perhaps the elephant in the room, amazing talk. So you said the developer is still in charge. You also said we've had three leaps in three years. Fast forwarding a little bit. Do you think humans will still need to be in the loop or will these AI systems be able to autonomously build and maintain software? The way I was thinking about that and talk about is that we called it co-pilot for recent. We need a pilot. We need a pilot that is creative that can decide what to do. It's kind of like a Lego set. You need to take this big problem and break it down into smaller problems into small building blocks. And for that, you need a systems thinker. You need a human that can figure out at my building a point of sales system, at my building an iPhone app, at my building a cool computer game, at my building the next Facebook. Those are very different systems. Now, this building blocks, they will grow in size. Today it's a couple of lines of code, maybe a whole file. And the future might be a whole subsystem. So I get more work taking off my shoulders, but I'm still there, you know, covering the large system. And as I mentioned, we're still running co-pilot systems from the 60s. So, we have lots of work to do. Absolutely. So we will be in charge orchestrating these systems at a higher level of abstraction. Thomas Dome, everybody. Thank you so much.